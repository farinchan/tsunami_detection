# Docker Compose untuk Tsunami Detection - Production Ready
version: '3.8'

services:
  # Tsunami Detection Streamlit App
  tsunami-app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: tsunami-detection-app
    ports:
      - "8501:8501"
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
      - ./deteksi_ombak.csv:/app/deteksi_ombak.csv
      - ./.env:/app/.env:ro
    environment:
      - PYTHONUNBUFFERED=1
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_SERVER_HEADLESS=true
      - OPENCV_FFMPEG_CAPTURE_OPTIONS=rtsp_transport;tcp|stimeout;5000000|max_delay;500000
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - tsunami-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL untuk logging dan data persistence
  postgres:
    image: postgres:13-alpine
    container_name: tsunami-postgres
    environment:
      POSTGRES_DB: tsunami_db
      POSTGRES_USER: tsunami_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-tsunami_secure_pass_2024}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db_init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - tsunami-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tsunami_user -d tsunami_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis untuk caching dan session management
  redis:
    image: redis:7-alpine
    container_name: tsunami-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - tsunami-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_pass_2024}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx sebagai reverse proxy dan load balancer
  nginx:
    image: nginx:alpine
    container_name: tsunami-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - tsunami-app
    restart: unless-stopped
    networks:
      - tsunami-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring dengan Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: tsunami-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - tsunami-network

  # Grafana untuk dashboard monitoring (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: tsunami-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin_secure_2024}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    restart: unless-stopped
    networks:
      - tsunami-network
    depends_on:
      - prometheus

networks:
  tsunami-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_data:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local